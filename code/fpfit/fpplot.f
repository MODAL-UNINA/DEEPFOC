      program fpplot
c
c     version 1.6  -  January 13, 1999
c
c     Purpose:       Plot earthquake ray polarities and fault planes on a lower hemisphere equal area projection.
c
c     Input file:    A file of the type "*.pol", which is generated by the program "Fpfit" (see "Fpfit, Fpplot, and Fppage: Fortran
c                    computer programs for calculating and displaying earthquake fault-plane solutions,
c                    by P. Reasenberg and D. Oppenheimer, U.S. Geological Survey Open-File Rep. 85-739)
c
c     Required routines: Calcomp style plot routines plots, plot, newpen, symbol.
c
c     Output:        Graphic output only
c
c     Authors:       Paul Reasenberg and David Oppenheimer, U.S.G.S. in Menlo Park.  Some of the routines
c                    were adopted from code written by John Lahr, Bruce Julian, and Fred Klein.
c
c     revisions:     5/29/86 - Ability to select events by sequence number or date added
c     revisions:     9/09/93 - Ability to colorize plot, make headers intelligible, add filename, date, strike/dip/rake on beachball
c     revisions:     1/13/99 - reads format from fpfit_v1.4, which outputs y2K dates and 5-letter station names, as well as v1.3
c
c
c     To switch from Unix to VMS version, perform the following within Unix vi editor:
c     g/VMS/.-1s/^/c/
c     g/VMS/s/^c/ /
c
      implicit none
c

      real              ain                             
c                                                       ! ray angle of incidence
      character*1       ansc                            
c                                                       ! flag: y(n)=do (not) plot color beach balls
      character*1       ansd                            
c                                                       ! flag: y(n)=do (not) plot discrepancy report
      character*1       ansn                            
c                                                       ! flag: y(n)=do (not) plot station names adjacent to first motions
      character*1       ansp                            
c                                                       ! flag: y(n)=do (not) plot current mechanism
      character*1       answ                            
c                                                       ! flag: y(n)=do (not) plot symbol size and names proportional to weight
      real              azm                             
c                                                       ! ray azimuth
      real              cx1                             
c                                                       ! x position of large circle center
      real              cx2                             
c                                                       ! x position of small circle center
      real              cy1                             
c                                                       ! y position of large circle center
      real              cy2                             
c                                                       ! y position of small circle center
      real              da1                             
c                                                       ! dip angle of principal plane
      real              da2                             
c                                                       ! dip angle of auxilliary plane
      character*13      date                            
c                                                       ! requested event date and origin time
      character*13      date1                           
c                                                       ! scratch variable for event date and origin time
      real              dd1                             
c                                                       ! dip direction of principal plane
      real              dd2                             
c                                                       ! dip direction of auxilliary plane
      character*1       disc                            
c                                                       ! flag: if "*" then first motion discrepant with solution
      real              dist                            
c                                                       ! epicentral distance
      character*140     event                           
c                                                       ! fpfit summary card
      character*50	filnam
c                                                       ! file name of data
      logical           first                           
c                                                       ! flag: true prior to plotting discrepant first motion
      integer           funit                           
c                                                       ! logical unit ".fps" file
      real              hite1                           
c                                                       ! height of p,t symbol in large circle
      real              hite2                           
c                                                       ! height of p,t symbol in small circle, dscrpncy rprt
      real              hite3                           
c                                                       ! height of title, extended summary card, first motion legend
      integer           hunit                           
c							! logical unit for web page parameter file
      integer           i                               
c                                                       ! loop index over number of lines of nearby solutions
      integer           iday                            
c                                                       ! day
      integer           ihr                             
c                                                       ! hour
      integer           iline                           
c                                                       ! current line #
      integer           imin                            
c                                                       ! minute
      integer           imo                             
c                                                       ! month
      integer           indx                            
c                                                       ! character position of first blank in title
      integer           ios                             
c                                                       ! i/o status descriptor
      integer           iunit                           
c                                                       ! logical unit ".pol" file
      integer           iyr                             
c                                                       ! year
      integer           iwt                             
c							! reading quality
      integer		jask
c							! function
      character*125     line                            
c                                                       ! scratch variable for plot output
      character*5       name                            
c                                                       ! station name
      integer           n                               
c                                                       ! loop index over number of nearby solutions
      integer           ncfrm
c                                                       ! frame pen color
      integer           ncup
c                                                       ! up pen color
      integer           ncdwn
c                                                       ! down pen color
      integer           ndisc
c							! number of reported discrepant observations                             
      integer           ndiscm
c							! maximum number of reported discrepant observations                             
      integer           nev                             
c                                                       ! event number
      logical           new                             
c                                                       ! flag: true prior to initializing plot software
      integer           nskip                           
c                                                       ! number of solutions to skip
      integer           num                             
c                                                       ! requested event number
      character*1       option                          
c                                                       ! plot option
      integer           ounit
c                                                       ! logical unit for output 
      real              pi                              
c                                                       ! pi
      character*4       prmk                            
c                                                       ! first motion description (eg. ipu0)
      logical           proces                          
c                                                       ! t(f)=plot this mechanism
      real              rad                             
c                                                       ! pi/180
      real              rmax1                           
c                                                       ! radius of large circle
      real              rmax2                           
c                                                       ! radius of small circle
      real              sa1                             
c                                                       ! rake of principal plane
      real              sa2                             
c                                                       ! rake of auxilliary plane
      character*1       sym                             
c                                                       ! first motion direction
      character*80      title                           
c                                                       ! data set descriptor
      real              wt                              
c                                                       ! plotting weight 
      logical		www
c							! T(F) version is (not) for www page
      real              xpos1                           
c                                                       ! leftmost x position of title, summary card, symbol legend
      real              xpos2                           
c                                                       ! leftmost x position of discrepancy report
      logical           y2k
c                                                       ! T(F) = .pol file format is (not) y2k compatible
      real              ypos                            
c                                                       ! y plot position
      real              ypos1                           
c                                                       ! y plot position of title
      real              ypos2                           
c                                                       ! y plot position of symbol legend
      real              ypos3                           
c                                                       ! y plot position of top of discrepancy report
c
c	common settings
c
	parameter (funit = 10)
	parameter (hunit = 8)
	parameter (hite1 = 0.2)
	parameter (hite2 = 0.07)
	parameter (hite3 = 0.1)
	parameter (iunit = 9)
	parameter (ounit = 6)
	parameter (rmax2 = 0.80)
	parameter (ypos1 = 7.7)
c
c	settings for www version (on recenteqs page)
c
c	parameter (cx1 = 3.3)
c	parameter (cx2 = 7.0)
c	parameter (cy1 = 5.75)
c	parameter (cy2 = 4.55)
c	parameter (ndiscm = 3)
c	parameter (rmax1 = 2.0)
c	parameter (xpos1 = 6.5)
c	parameter (xpos2 = 6.5)
c	parameter (ypos2 = 7.0)
c	parameter (ypos3 = 6.0)
c	parameter (www = .true.)
c
c	settings for non-www version
c
	parameter (cx1 = 4.20)
	parameter (cx2 = 9.0)
	parameter (cy1 = 3.70)
	parameter (cy2 = 1.55)
	parameter (ndiscm = 36)
	parameter (rmax1 = 2.95)
	parameter (xpos1 = 0.3)
	parameter (xpos2 = 8.2)
	parameter (ypos2 = 0.6)
	parameter (ypos3 = 6.5)
	parameter (www = .false.)

      pi = atan(1.0)*4.0
      rad = pi/180.0
      new = .true.
c
c  get user input
c
      call intero (iunit, ansn, answ, ansd, ansc, ncfrm, ncup,
     1 ncdwn, option, nskip, funit, date, filnam, y2k)
c
c read hypo71 header card (first line in model file)
c
74    nev = 0
      iline = 1
      read (iunit, 75, err = 2000) title
75    format (a)
      indx = 1
      do 80 i = 1, 80
      if (title(i:i) .ne. ' ') then
        indx = i
        goto 90
      end if
80    continue
90    title = title(indx:len(title))
c
c initialize plot program
c
      if (new) then
        call plots (0., 0., 0)
c        call plot (0., 0., -999)
	if (ansc .eq. 'y') call newpen (ncfrm)
        new = .false.
      end if
c
c read next event
c
        ansp = 'y'
        proces = .true.
c
c  but first find out which event to plot
c
100     if ((option .eq. 'd' .and. proces) .or.
     & (option .eq. 'd' .and. ansp .eq. 'n')) then
c          call plot (0., 0., -999)
105       call askc (
     1 'Enter date & origin time (e.g., "19891004 0004") or "stop":  ',
     2  date)
          if (date .eq. 'stop') goto 1010
          read (date, '(i4, 2i2, 1x, 2i2)', iostat =ios) iyr, imo, iday,
     & ihr, imin
          if (ios .ne. 0) then
            write (ounit,106) '**** Invalid date; please try again ****'
106	    format (//, 1x, a, /)
            goto 105
          endif
          write (date, '(i4, 2i2, 1x, 2i2)') iyr, imo, iday, ihr, imin
          ansp = 'y'
        else if (option .eq. 'n' .and. proces) then
110       num = nev + 1
c          call plot (0., 0., -999)
          num = jask ('Enter sequence number (0 to stop):  ', num)
          if (num .eq. 0) then
            goto  1010
          else if (num .le. nev) then
            write (ounit, 106) 
     & '**** Requested # must be greater than current event # ****'
            goto 110
          end if
        else if (option .eq. 'f' .and. proces) then
	  if (.not. y2k) then
            read (funit, '(3i2, 1x, 2i2)', end = 1010) iyr, imo, iday,
     & ihr, imin

c assume that 20th century is between 67 and 99

            if (iyr .ge. 0 .and. iyr .lt. 67) then
	      iyr = 2000 + iyr
            else
	      iyr = 1900 + iyr
            endif
	  else
            read (funit, '(i4, 2i2, 1x, 2i2)', end = 1010) iyr,imo,iday,
     & ihr, imin
	  endif
          write (date, '(i4, 2i2, 1x, 2i2)') iyr, imo, iday, ihr, imin
        end if
        iline = iline + 1
c
c  read extended summary card
c
        read (iunit, '(a)', end = 1000, err = 2000) event
        nev = nev + 1
	if (.not. y2k) then
          read (event, '(3i2, 1x, 2i2)') iyr, imo, iday, ihr, imin

c assume that 20th century is between 67 and 99

          if (iyr .ge. 0 .and. iyr .lt. 67) then
	    event = '20'//event
          else
	    event = '19'//event
          endif
	endif
        if (option .eq. 'd' .or. option .eq. 'f') then
          read (event, '(i4, 2i2, 1x, 2i2)') iyr, imo, iday, ihr, imin
          write (date1, '(i4, 2i2, 1x, 2i2)') iyr, imo, iday, ihr, imin
        end if
        if (option .eq. 'a' .and. nev .gt. nskip) then
          proces = .true.
        else if ((option .eq. 'd' .or. option .eq. 'f') .and. 
     & date1 .eq. date) then
          proces = .true.
        else if (option .eq. 'f' .and. date1 .gt. date) then
          write (ounit, 106) 
     & '**** Requested event not found; current date is: '//event(1:13)
     &//' ****'
          proces = .false.
        else if (option .eq. 'd' .and. date1 .gt. date) then
          write (ounit, 106) 
     & '**** Requested event not found; current date is: '//event(1:13)
     &//' ****'
          date = date1
130       ansp = 'y'
          call askc ('Do you want to plot this event (y or n)?  ', ansp)
          if ((ansp .ne. 'y' .and. ansp .ne. 'n') .or. ios .ne. 0) then
            write (ounit, '(a)') 
     & '**** Please answer "y" or "n"; try again ****'
            goto 130
          else if (ansp .eq. 'y') then
            proces = .true.
          else
            proces = .false.
          end if
        else if (option .eq. 'n' .and. nev .eq. num) then
          proces = .true.
        else
          proces = .false.
        end if
c
c  plot this event
c
        if (proces) then
c
          first = .true.
          if (ansc .eq. 'n') call newpen (1)
          read (event, 140) dd1, da1, sa1
140       format (t83, f4.0, f3.0, f4.0)
c
c plot summary card information, nets, and explanation of symbols
c
	  call pltnet (xpos1, ypos1, ansc, hite3, event, hite2, pi,
     1 ncfrm, ncdwn, cx1, cx2, cy1, cy2, rmax1, rmax2, ncup, iunit,
     2 title, ypos2, www)
c
c plot nodal planes
c
          call plotpl (cx1, cy1, da1, pi, rad, rmax1, dd1 - 90.)
          call auxpln (dd1, da1, sa1, dd2, da2, sa2)
          call plotpl (cx1, cy1, da2, pi, rad, rmax1, dd2 - 90.)
c
c  plot "p" and "t" axes in big net
c
          name = '     '
          wt = 1.0
          if (ansc .eq. 'n') call newpen (3)
          call tpplot (cx1, cy1, da1, dd1, hite1, pi, rad, rmax1, sa1,
     & wt)
c
c plot the p and t axes in small net corresponding to the set of "neighboring solutions"
c
          call tpplot (cx2, cy2, da1, dd1, hite2, pi, rad, rmax2, sa1,
     & wt)
          if (ansc .eq. 'n') call newpen (1)
        end if
c
c  now read the auxilliary solutions
c
150     iline = iline + 1
        read (iunit, '(a)') line
        if (line(1:4) .eq. 'P-AX' .or. line(1:4) .eq. 'T-AX') then
          if (proces) then
            if (line(1:4) .eq. 'P-AX') then
              sym = 'P'
            else
              sym = 'T'
            end if
            do 160 n = 1, 24
              indx = 5 + (n - 1)*5
              if (line(indx:indx + 5) .eq. '     ') then
                goto 150
              else
                read (line(indx:indx + 5), '(f3.0, f2.0)') azm, ain
                call pltsym (ain, azm, cx2, cy2, hite2, name, pi, rad,
     & rmax2, sym, wt)
              end if
160         continue
          end if
          goto 150
        end if
c
c read phase cards
c
	ndisc = 0
180     iline = iline + 1
	if (.not. y2k) then
          read (iunit, 190, end = 1000, err = 2000) name(1:4), dist, 
     1 azm, ain, prmk, iwt, disc
190       format (a4, 3f6.1, 3x, a4, t29, i1, t37, a1)
	else
          read (iunit, 191, end = 1000, err = 2000) name, dist, azm,ain,
     & prmk, iwt, disc
191       format (a5, 3f6.1, 3x, a4, t30, i1, t38, a1)
	endif
	if (dist .gt. 999.) dist = 999.
	wt = 1. - 0.25*float(iwt)
        if (name .ne. '    ') then
          if (proces) then
c
c report discrepant observations
c
            if (disc .eq. '*' .and. ansd.eq.'y') then
              if (first) then
                line(1:23) = 'DISCREPANT OBSERVATIONS'
                ypos = ypos3
                call symbol (xpos2 + .15, ypos, hite2, line, 0., 23)
c                call symbol (xpos2, ypos, hite2, %ref(line), 0., 23)		! VAX/VMS version
                ypos = ypos - hite2*1.5
                line(1:4) = 'STAT'
	        call symbol (xpos2, ypos, hite2, line, 0., 4) 
c	        call symbol (xpos2, ypos, hite2, %ref(line), 0., 4) 			! VAX/VMS version
	        line(1:3) = 'DIST'
	        call symbol (xpos2 + 0.4, ypos, hite2, line, 0., 4) 
c	        call symbol (xpos2 + 0.4, ypos, hite2, %ref(line), 0.,4) 		! VAX/VMS version
	        line(1:3) = 'AZM'
	        call symbol (xpos2 + 0.8, ypos, hite2, line, 0., 3) 
c	        call symbol (xpos2 + 0.8, ypos, hite2, %ref(line), 0.,3) 		! VAX/VMS version
	        line(1:3) = 'AIN'
	        call symbol (xpos2 + 1.15, ypos, hite2, line, 0., 3) 
c	        call symbol (xpos2 + 1.15, ypos, hite2, %ref(line),0.,3) 		! VAX/VMS version
	        line(1:4) = 'PRMK'
	        call symbol (xpos2 + 1.5, ypos, hite2, line, 0., 4) 
c	        call symbol (xpos2 + 1.5, ypos, hite2, %ref(line), 0.,4) 		! VAX/VMS version
                ypos = ypos - hite2*.5
	        call plot (xpos2, ypos, 3)
	        call plot (xpos2 + 1.75, ypos, 2)
                ypos = ypos - hite2*1.5
                first = .false.
              end if
	      ndisc = ndisc + 1
              if (ndisc .le. ndiscm) then
	        call symbol (xpos2, ypos, hite2, name, 0., 5)
c	        call symbol (xpos2, ypos, hite2, %ref(name), 0., 5)		! VAX/VMS version
	        write (line, '(i4)') nint(dist)
	        call symbol (xpos2 + 0.4, ypos, hite2, line, 0., 4) 
c	        call symbol (xpos2 + 0.4, ypos, hite2, %ref(line), 0., 4) 	! VAX/VMS version
	        write (line, '(i3)') nint(azm)
	        call symbol (xpos2 + 0.8, ypos, hite2, line, 0., 3) 
c	        call symbol (xpos2 + 0.8, ypos, hite2, %ref(line), 0., 3) 	! VAX/VMS version
	        write (line, '(i3)') nint(ain)
	        call symbol (xpos2 + 1.15, ypos, hite2, line, 0., 3) 
c	        call symbol (xpos2 + 1.15, ypos, hite2, %ref(line), 0., 3) 	! VAX/VMS version
	        call symbol (xpos2 + 1.5, ypos, hite2, prmk, 0., 4) 
c	        call symbol (xpos2 + 1.5, ypos, hite2, %ref(prmk), 0., 4) 	! VAX/VMS version
                ypos = ypos - hite2*1.5
	      endif
	   
c
c plot first motions
c
            end if
            if (ansn .eq. 'n') name = '     '
            if (prmk(3:3) .eq. 'U' .or. prmk(3:3) .eq. '+' .or.
     & prmk(3:3) .eq. 'C') then
              sym = 'C'
	      if (ansc .eq. 'y') call newpen (ncup)
            else
              sym = 'D'
	      if (ansc .eq. 'y') call newpen (ncdwn)
            end if
            if (answ .eq. 'n') wt = 1.
            call pltsym (ain, azm, cx1, cy1, hite1, name, pi, rad,
     & rmax1, sym, wt)
	    if (ansc .eq. 'y') call newpen(ncfrm)
          end if
          goto 180
        end if
        if (proces) then
          call auxpln (dd1, da1, sa1, dd2, da2, sa2)
	  call pltsol (dd1, da1, sa1, pi, rmax1, cx1, cy1, hite3)
	  call pltsol (dd2, da2, sa2, pi, rmax1, cx1, cy1, hite3)
	  if (ndisc .gt. ndiscm) then
	    write (line, 200) ndisc - ndiscm
200	    format ('+ ', i3, ' MORE DISCREPANT PHASES')
            ypos = ypos - hite2*1.5
	    call symbol (xpos2, ypos, hite2, line, 0., 28) 
c	    call symbol (xpos2, ypos, hite2, %ref(line), 0., 28) 	! VAX/VMS version
	  end if
	  call plot (0., 0., -999)
	end if
      goto 100
c
c end of file; close up shop
c
1000  indx = 1
      do 1004 i = 50, 1, -1
      if (filnam(i:i) .ne. ' ') then
        indx = i
        goto 1005
      end if
1004  continue
1005  write (ounit, 106) 'End of file '//filnam(1:indx)//' reached'
1009  filnam = 'stop'
      call askc ('Enter name of next ".pol" file ("stop" to stop):  ',
     & filnam)
      if (filnam .eq. 'stop') then
        goto 1010
      else
	close (iunit)
        open (iunit, file = filnam, status = 'old', blank
     & = 'zero', iostat = ios)
        if (ios .ne. 0) then
          write (ounit, '(a)') 'Error opening file - try again'
          goto 1009
        else
          goto 74
        end if
      end if
c1010  call plot (0., 0., +999)
1010  close (iunit)
      close (funit)
      stop
c
c read error
c
2000  write (ounit, '(a, i6)') 'Read error on line ', iline
      stop
      end
